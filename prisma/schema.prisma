generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  accounts      Account[]
  sessions      Session[]
  createdCarts  Cart[]     @relation("Owner")
  closedCarts   Cart[]     @relation("Shopper")
  boughtItems   CartItem[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  color String @default("")
  items Item[]
}

model Item {
  id          Int        @id @default(autoincrement())
  name        String
  category    Category   @relation(fields: [categoryId], references: [id])
  timesBought Int        @default(0)
  categoryId  Int
  cartItems   CartItem[]
  fridges     Fridge[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  name      String
  ownerId   String
  shopperId String
  isClosed  Boolean    @default(false)
  createdAt DateTime   @default(now())
  closedAt  DateTime?
  items     CartItem[]
  owner     User       @relation("Owner", fields: [ownerId], references: [id])
  shopper   User       @relation("Shopper", fields: [shopperId], references: [id])
}

model CartItem {
  id         Int      @id @default(autoincrement())
  itemId     Int
  cartId     Int
  amount     Int
  boughtBy   User     @relation(fields: [userId], references: [id])
  isPickedUp Boolean  @default(false)
  updatedAt  DateTime @default(now())
  item       Item     @relation(fields: [itemId], references: [id])
  cart       Cart     @relation(fields: [cartId], references: [id])
  userId     String
}

model Fridge {
  id        Int      @id @default(autoincrement())
  item      Item     @relation(fields: [itemId], references: [id])
  amount    Int
  updatedAt DateTime @default(now())
  itemId    Int
}
